name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1.2'
          extensions: mbstring, xml, bcmath, curl, sqlite
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Copy .env
        run: cp .env.example .env

      - name: Generate app key
        run: php artisan key:generate

  unit-test:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1.2'
          extensions: mbstring, xml, bcmath, curl, sqlite
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Setup .env.testing
        run: cp .env.example .env.testing

      - name: Generate app key for tests
        run: php artisan key:generate --env=testing

      - name: Reset test database
        run: |
          rm -f database/database.sqlite
          touch database/database.sqlite
          php artisan migrate --env=testing --force

      - name: Verify phpunit.xml exists
        run: |
          if [ ! -f phpunit.xml ]; then
            echo "❌ phpunit.xml not found!"
            exit 1
          fi
          echo "✅ phpunit.xml exists"

      - name: Run Tests with Coverage
        run: php artisan test --env=testing --configuration=phpunit.xml --coverage-text --coverage-clover=coverage.xml --no-interaction

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  performance-test:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo apt update
          sudo apt install -y gnupg software-properties-common curl
          curl -fsSL https://dl.k6.io/key.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/k6-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt update
          sudo apt install -y k6

      - name: Run k6 test
        run: k6 run tests/loadtest.js

  deploy-staging:
    runs-on: self-hosted
    needs: performance-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging (local folder)
        id: deploy
        run: |
          DEPLOY_DIR=/var/www/laravel-app
          RELEASE_DIR=$DEPLOY_DIR/releases/${GITHUB_RUN_NUMBER}
          mkdir -p $RELEASE_DIR
          rsync -av --delete ./ $RELEASE_DIR/
          
          # Backup symlink lama
          if [ -L $DEPLOY_DIR/current ]; then
            OLD_RELEASE=$(readlink $DEPLOY_DIR/current)
            echo $OLD_RELEASE > $DEPLOY_DIR/.last_release
          fi
          
          # Update symlink ke release terbaru
          ln -nfs $RELEASE_DIR $DEPLOY_DIR/current
          
          cd $DEPLOY_DIR/current
          composer install --no-dev --optimize-autoloader
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

  rollback:
    runs-on: self-hosted
    if: failure()
    steps:
      - name: Rollback to previous release
        run: |
          DEPLOY_DIR=/var/www/laravel-app
          if [ -f $DEPLOY_DIR/.last_release ]; then
            PREV_RELEASE=$(cat $DEPLOY_DIR/.last_release)
            ln -nfs $PREV_RELEASE $DEPLOY_DIR/current
            echo "✅ Rolled back to previous release: $PREV_RELEASE"
          else
            echo "⚠️ No previous release found. Rollback skipped."
          fi
